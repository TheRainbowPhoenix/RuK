from typing import List, Tuple, Dict

opcodes_table: List[Tuple[int, str, int, int, Dict[str, int]]] = [
    # (id, name:str, mask:int, code:int, args: dict{name:str, mask:int}
    (
        0, "mov R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0110_0000_0000_0011,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        1, "mov #h'{i:04x},R{n:d}",
        0b1111_0000_0000_0000,
        0b1110_0000_0000_0000,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'i': 0b0000_0000_1111_1111,  # i
        }
    ), (
        4, "mova @(R{d:d},PC),R0",
        0b1111_1111_0000_0000,
        0b1100_0111_0000_0000,
        {
            'd': 0b0000_0000_1111_1111,  # d
        }
    ), (
        5, "mov.w @(R{d:d},PC),R{n:d}",
        0b1111_0000_0000_0000,
        0b1001_0000_0000_0000,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'd': 0b0000_0000_1111_1111,  # d
        }
    ), (
        6, "mov.l @(R{d:d},PC),R{n:d}",
        0b1111_0000_0000_0000,
        0b1101_0000_0000_0000,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'd': 0b0000_0000_1111_1111,  # d
        }
    ), (
        7, "mov.b @R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0110_0000_0000_0000,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        8, "mov.w @R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0110_0000_0000_0001,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        9, "mov.l @R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0110_0000_0000_0010,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        10, "mov.b R{m:d},@R{n:d}",
        0b1111_0000_0000_1111,
        0b0010_0000_0000_0000,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        11, "mov.w R{m:d},@R{n:d}",
        0b1111_0000_0000_1111,
        0b0010_0000_0000_0001,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        12, "mov.l R{m:d},@R{n:d}",
        0b1111_0000_0000_1111,
        0b0010_0000_0000_0010,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        13, "mov.b @R{m:d}+,R{n:d}",
        0b1111_0000_0000_1111,
        0b0110_0000_0000_0100,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        14, "mov.w @R{m:d}+,R{n:d}",
        0b1111_0000_0000_1111,
        0b0110_0000_0000_0101,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        15, "mov.l @R{m:d}+,R{n:d}",
        0b1111_0000_0000_1111,
        0b0110_0000_0000_0110,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        16, "mov.b R{m:d},@-R{n:d}",
        0b1111_0000_0000_1111,
        0b0010_0000_0000_0100,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        17, "mov.w R{m:d},@-R{n:d}",
        0b1111_0000_0000_1111,
        0b0010_0000_0000_0101,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        18, "mov.l R{m:d},@-R{n:d}",
        0b1111_0000_0000_1111,
        0b0010_0000_0000_0110,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        25, "mov.b @(R{d:d},R{m:d}),R0",
        0b1111_1111_0000_0000,
        0b1000_0100_0000_0000,
        {
            'm': 0b0000_0000_1111_0000,  # m
            'd': 0b0000_0000_0000_1111,  # d
        }
    ), (
        28, "mov.w @(R{d:d},R{m:d}),R0",
        0b1111_1111_0000_0000,
        0b1000_0101_0000_0000,
        {
            'm': 0b0000_0000_1111_0000,  # m
            'd': 0b0000_0000_0000_1111,  # d
        }
    ), (
        31, "mov.l @(R{d:d},R{m:d}),R{n:d}",
        0b1111_0000_0000_0000,
        0b0101_0000_0000_0000,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
            'd': 0b0000_0000_0000_1111,  # d
        }
    ), (
        33, "mov.b R0,@(R{d:d},R{n:d})",
        0b1111_1111_0000_0000,
        0b1000_0000_0000_0000,
        {
            'n': 0b0000_0000_1111_0000,  # n
            'd': 0b0000_0000_0000_1111,  # d
        }
    ), (
        35, "mov.w R0,@(R{d:d},R{n:d})",
        0b1111_1111_0000_0000,
        0b1000_0001_0000_0000,
        {
            'n': 0b0000_0000_1111_0000,  # n
            'd': 0b0000_0000_0000_1111,  # d
        }
    ), (
        37, "mov.l R{m:d},@(R{d:d},R{n:d})",
        0b1111_0000_0000_0000,
        0b0001_0000_0000_0000,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
            'd': 0b0000_0000_0000_1111,  # d
        }
    ), (
        39, "mov.b @(R0,R{m:d}),R{n:d}",
        0b1111_0000_0000_1111,
        0b0000_0000_0000_1100,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        40, "mov.w @(R0,R{m:d}),R{n:d}",
        0b1111_0000_0000_1111,
        0b0000_0000_0000_1101,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        41, "mov.l @(R0,R{m:d}),R{n:d}",
        0b1111_0000_0000_1111,
        0b0000_0000_0000_1110,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        42, "mov.b R{m:d},@(R0,R{n:d})",
        0b1111_0000_0000_1111,
        0b0000_0000_0000_0100,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        43, "mov.w R{m:d},@(R0,R{n:d})",
        0b1111_0000_0000_1111,
        0b0000_0000_0000_0101,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        44, "mov.l R{m:d},@(R0,R{n:d})",
        0b1111_0000_0000_1111,
        0b0000_0000_0000_0110,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        45, "mov.b @(R{d:d},GBR),R0",
        0b1111_1111_0000_0000,
        0b1100_0100_0000_0000,
        {
            'd': 0b0000_0000_1111_1111,  # d
        }
    ), (
        46, "mov.w @(R{d:d},GBR),R0",
        0b1111_1111_0000_0000,
        0b1100_0101_0000_0000,
        {
            'd': 0b0000_0000_1111_1111,  # d
        }
    ), (
        47, "mov.l @(R{d:d},GBR),R0",
        0b1111_1111_0000_0000,
        0b1100_0110_0000_0000,
        {
            'd': 0b0000_0000_1111_1111,  # d
        }
    ), (
        48, "mov.b R0,@(R{d:d},GBR)",
        0b1111_1111_0000_0000,
        0b1100_0000_0000_0000,
        {
            'd': 0b0000_0000_1111_1111,  # d
        }
    ), (
        49, "mov.w R0,@(R{d:d},GBR)",
        0b1111_1111_0000_0000,
        0b1100_0001_0000_0000,
        {
            'd': 0b0000_0000_1111_1111,  # d
        }
    ), (
        50, "mov.l R0,@(R{d:d},GBR)",
        0b1111_1111_0000_0000,
        0b1100_0010_0000_0000,
        {
            'd': 0b0000_0000_1111_1111,  # d
        }
    ), (
        60, "movt R{n:d}",
        0b1111_0000_1111_1111,
        0b0000_0000_0010_1001,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        62, "swap.b R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0110_0000_0000_1000,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        63, "swap.w R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0110_0000_0000_1001,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        64, "xtrct R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0010_0000_0000_1101,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        79, "add R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0011_0000_0000_1100,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        80, "add #h'{i:04x},R{n:d}",
        0b1111_0000_0000_0000,
        0b0111_0000_0000_0000,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'i': 0b0000_0000_1111_1111,  # i
        }
    ), (
        81, "addc R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0011_0000_0000_1110,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        82, "addv R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0011_0000_0000_1111,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        83, "cmp/eq #h'{i:04x},R0",
        0b1111_1111_0000_0000,
        0b1000_1000_0000_0000,
        {
            'i': 0b0000_0000_1111_1111,  # i
        }
    ), (
        84, "cmp/eq R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0011_0000_0000_0000,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        85, "cmp/hs R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0011_0000_0000_0010,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        86, "cmp/ge R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0011_0000_0000_0011,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        87, "cmp/hi R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0011_0000_0000_0110,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        88, "cmp/gt R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0011_0000_0000_0111,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        89, "cmp/pl R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0001_0101,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        90, "cmp/pz R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0001_0001,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        91, "cmp/str R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0010_0000_0000_1100,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        96, "div0s R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0010_0000_0000_0111,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        97, "div0u",
        0b1111_1111_1111_1111,
        0b0000_0000_0001_1001,
        {

        }
    ), (
        98, "div1 R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0011_0000_0000_0100,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        101, "dmuls.l R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0011_0000_0000_1101,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        102, "dmulu.l R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0011_0000_0000_0101,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        103, "dt R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0001_0000,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        104, "exts.b R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0110_0000_0000_1110,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        105, "exts.w R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0110_0000_0000_1111,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        106, "extu.b R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0110_0000_0000_1100,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        107, "extu.w R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0110_0000_0000_1101,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        108, "mac.l @R{m:d}+,@R{n:d}+",
        0b1111_0000_0000_1111,
        0b0000_0000_0000_1111,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        109, "mac.w @R{m:d}+,@R{n:d}+",
        0b1111_0000_0000_1111,
        0b0100_0000_0000_1111,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        110, "mul.l R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0000_0000_0000_0111,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        112, "muls.w R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0010_0000_0000_1111,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        113, "mulu.w R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0010_0000_0000_1110,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        114, "neg R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0110_0000_0000_1011,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        115, "negc R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0110_0000_0000_1010,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        116, "sub R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0011_0000_0000_1000,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        117, "subc R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0011_0000_0000_1010,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        118, "subv R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0011_0000_0000_1011,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        119, "and R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0010_0000_0000_1001,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        120, "and #h'{i:04x},R0",
        0b1111_1111_0000_0000,
        0b1100_1001_0000_0000,
        {
            'i': 0b0000_0000_1111_1111,  # i
        }
    ), (
        121, "and.b #h'{i:04x},@(R0,GBR)",
        0b1111_1111_0000_0000,
        0b1100_1101_0000_0000,
        {
            'i': 0b0000_0000_1111_1111,  # i
        }
    ), (
        122, "not R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0110_0000_0000_0111,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        123, "or R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0010_0000_0000_1011,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        124, "or #h'{i:04x},R0",
        0b1111_1111_0000_0000,
        0b1100_1011_0000_0000,
        {
            'i': 0b0000_0000_1111_1111,  # i
        }
    ), (
        125, "or.b #h'{i:04x},@(R0,GBR)",
        0b1111_1111_0000_0000,
        0b1100_1111_0000_0000,
        {
            'i': 0b0000_0000_1111_1111,  # i
        }
    ), (
        126, "tas.b @R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0001_1011,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        127, "tst R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0010_0000_0000_1000,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        128, "tst #h'{i:04x},R0",
        0b1111_1111_0000_0000,
        0b1100_1000_0000_0000,
        {
            'i': 0b0000_0000_1111_1111,  # i
        }
    ), (
        129, "tst.b #h'{i:04x},@(R0,GBR)",
        0b1111_1111_0000_0000,
        0b1100_1100_0000_0000,
        {
            'i': 0b0000_0000_1111_1111,  # i
        }
    ), (
        130, "xor R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0010_0000_0000_1010,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        131, "xor #h'{i:04x},R0",
        0b1111_1111_0000_0000,
        0b1100_1010_0000_0000,
        {
            'i': 0b0000_0000_1111_1111,  # i
        }
    ), (
        132, "xor.b #h'{i:04x},@(R0,GBR)",
        0b1111_1111_0000_0000,
        0b1100_1110_0000_0000,
        {
            'i': 0b0000_0000_1111_1111,  # i
        }
    ), (
        133, "rotcl R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0010_0100,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        134, "rotcr R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0010_0101,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        135, "rotl R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0000_0100,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        136, "rotr R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0000_0101,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        137, "shad R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0100_0000_0000_1100,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        138, "shal R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0010_0000,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        139, "shar R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0010_0001,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        140, "shld R{m:d},R{n:d}",
        0b1111_0000_0000_1111,
        0b0100_0000_0000_1101,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_1111_0000,  # m
        }
    ), (
        141, "shll R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0000_0000,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        142, "shll2 R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0000_1000,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        143, "shll8 R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0001_1000,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        144, "shll16 R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0010_1000,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        145, "shlr R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0000_0001,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        146, "shlr2 R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0000_1001,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        147, "shlr8 R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0001_1001,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        148, "shlr16 R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0010_1001,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        149, "bf label",
        0b1111_1111_0000_0000,
        0b1000_1011_0000_0000,
        {
            'd': 0b0000_0000_1111_1111,  # d
        }
    ), (
        150, "bf/s label",
        0b1111_1111_0000_0000,
        0b1000_1111_0000_0000,
        {
            'd': 0b0000_0000_1111_1111,  # d
        }
    ), (
        151, "bt label",
        0b1111_1111_0000_0000,
        0b1000_1001_0000_0000,
        {
            'd': 0b0000_0000_1111_1111,  # d
        }
    ), (
        152, "bt/s label",
        0b1111_1111_0000_0000,
        0b1000_1101_0000_0000,
        {
            'd': 0b0000_0000_1111_1111,  # d
        }
    ), (
        153, "bra label",
        0b1111_0000_0000_0000,
        0b1010_0000_0000_0000,
        {
            'd': 0b0000_1111_1111_1111,  # d
        }
    ), (
        154, "braf R{m:d}",
        0b1111_0000_1111_1111,
        0b0000_0000_0010_0011,
        {
            'm': 0b0000_1111_0000_0000,  # m
        }
    ), (
        155, "bsr label",
        0b1111_0000_0000_0000,
        0b1011_0000_0000_0000,
        {
            'd': 0b0000_1111_1111_1111,  # d
        }
    ), (
        156, "bsrf R{m:d}",
        0b1111_0000_1111_1111,
        0b0000_0000_0000_0011,
        {
            'm': 0b0000_1111_0000_0000,  # m
        }
    ), (
        157, "jmp @R{m:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0010_1011,
        {
            'm': 0b0000_1111_0000_0000,  # m
        }
    ), (
        158, "jsr @R{m:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0000_1011,
        {
            'm': 0b0000_1111_0000_0000,  # m
        }
    ), (
        161, "rts",
        0b1111_1111_1111_1111,
        0b0000_0000_0000_1011,
        {

        }
    ), (
        164, "clrmac",
        0b1111_1111_1111_1111,
        0b0000_0000_0010_1000,
        {

        }
    ), (
        165, "clrs",
        0b1111_1111_1111_1111,
        0b0000_0000_0100_1000,
        {

        }
    ), (
        166, "clrt",
        0b1111_1111_1111_1111,
        0b0000_0000_0000_1000,
        {

        }
    ), (
        169, "ldc R{m:d},SR",
        0b1111_0000_1111_1111,
        0b0100_0000_0000_1110,
        {
            'm': 0b0000_1111_0000_0000,  # m
        }
    ), (
        170, "ldc.l @R{m:d}+,SR",
        0b1111_0000_1111_1111,
        0b0100_0000_0000_0111,
        {
            'm': 0b0000_1111_0000_0000,  # m
        }
    ), (
        172, "ldc R{m:d},GBR",
        0b1111_0000_1111_1111,
        0b0100_0000_0001_1110,
        {
            'm': 0b0000_1111_0000_0000,  # m
        }
    ), (
        173, "ldc.l @R{m:d}+,GBR",
        0b1111_0000_1111_1111,
        0b0100_0000_0001_0111,
        {
            'm': 0b0000_1111_0000_0000,  # m
        }
    ), (
        174, "ldc R{m:d},VBR",
        0b1111_0000_1111_1111,
        0b0100_0000_0010_1110,
        {
            'm': 0b0000_1111_0000_0000,  # m
        }
    ), (
        175, "ldc.l @R{m:d}+,VBR",
        0b1111_0000_1111_1111,
        0b0100_0000_0010_0111,
        {
            'm': 0b0000_1111_0000_0000,  # m
        }
    ), (
        184, "ldc R{m:d},SSR",
        0b1111_0000_1111_1111,
        0b0100_0000_0011_1110,
        {
            'm': 0b0000_1111_0000_0000,  # m
        }
    ), (
        185, "ldc.l @R{m:d}+,SSR",
        0b1111_0000_1111_1111,
        0b0100_0000_0011_0111,
        {
            'm': 0b0000_1111_0000_0000,  # m
        }
    ), (
        186, "ldc R{m:d},SPC",
        0b1111_0000_1111_1111,
        0b0100_0000_0100_1110,
        {
            'm': 0b0000_1111_0000_0000,  # m
        }
    ), (
        187, "ldc.l @R{m:d}+,SPC",
        0b1111_0000_1111_1111,
        0b0100_0000_0100_0111,
        {
            'm': 0b0000_1111_0000_0000,  # m
        }
    ), (
        188, "ldc R{m:d},DBR",
        0b1111_0000_1111_1111,
        0b0100_0000_1111_1010,
        {
            'm': 0b0000_1111_0000_0000,  # m
        }
    ), (
        189, "ldc.l @R{m:d}+,DBR",
        0b1111_0000_1111_1111,
        0b0100_0000_1111_0110,
        {
            'm': 0b0000_1111_0000_0000,  # m
        }
    ), (
        190, "ldc R{m:d},R{n:d}_BANK",
        0b1111_0000_1000_1111,
        0b0100_0000_1000_1110,
        {
            'n': 0b0000_0000_0111_0000,  # n
            'm': 0b0000_1111_0000_0000,  # m
        }
    ), (
        191, "ldc.l @R{m:d}+,R{n:d}_BANK",
        0b1111_0000_1000_1111,
        0b0100_0000_1000_0111,
        {
            'n': 0b0000_0000_0111_0000,  # n
            'm': 0b0000_1111_0000_0000,  # m
        }
    ), (
        194, "lds R{m:d},MACH",
        0b1111_0000_1111_1111,
        0b0100_0000_0000_1010,
        {
            'm': 0b0000_1111_0000_0000,  # m
        }
    ), (
        195, "lds.l @R{m:d}+,MACH",
        0b1111_0000_1111_1111,
        0b0100_0000_0000_0110,
        {
            'm': 0b0000_1111_0000_0000,  # m
        }
    ), (
        196, "lds R{m:d},MACL",
        0b1111_0000_1111_1111,
        0b0100_0000_0001_1010,
        {
            'm': 0b0000_1111_0000_0000,  # m
        }
    ), (
        197, "lds.l @R{m:d}+,MACL",
        0b1111_0000_1111_1111,
        0b0100_0000_0001_0110,
        {
            'm': 0b0000_1111_0000_0000,  # m
        }
    ), (
        198, "lds R{m:d},PR",
        0b1111_0000_1111_1111,
        0b0100_0000_0010_1010,
        {
            'm': 0b0000_1111_0000_0000,  # m
        }
    ), (
        199, "lds.l @R{m:d}+,PR",
        0b1111_0000_1111_1111,
        0b0100_0000_0010_0110,
        {
            'm': 0b0000_1111_0000_0000,  # m
        }
    ), (
        212, "ldtlb",
        0b1111_1111_1111_1111,
        0b0000_0000_0011_1000,
        {

        }
    ), (
        213, "movca.l R0,@R{n:d}",
        0b1111_0000_1111_1111,
        0b0000_0000_1100_0011,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        214, "nop",
        0b1111_1111_1111_1111,
        0b0000_0000_0000_1001,
        {

        }
    ), (
        215, "ocbi @R{n:d}",
        0b1111_0000_1111_1111,
        0b0000_0000_1001_0011,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        216, "ocbp @R{n:d}",
        0b1111_0000_1111_1111,
        0b0000_0000_1010_0011,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        217, "ocbwb @R{n:d}",
        0b1111_0000_1111_1111,
        0b0000_0000_1011_0011,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        218, "pref @R{n:d}",
        0b1111_0000_1111_1111,
        0b0000_0000_1000_0011,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        221, "rte",
        0b1111_1111_1111_1111,
        0b0000_0000_0010_1011,
        {

        }
    ), (
        224, "sets",
        0b1111_1111_1111_1111,
        0b0000_0000_0101_1000,
        {

        }
    ), (
        225, "sett",
        0b1111_1111_1111_1111,
        0b0000_0000_0001_1000,
        {

        }
    ), (
        226, "sleep",
        0b1111_1111_1111_1111,
        0b0000_0000_0001_1011,
        {

        }
    ), (
        228, "stc SR,R{n:d}",
        0b1111_0000_1111_1111,
        0b0000_0000_0000_0010,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        229, "stc.l SR,@-R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0000_0011,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        231, "stc GBR,R{n:d}",
        0b1111_0000_1111_1111,
        0b0000_0000_0001_0010,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        232, "stc.l GBR,@-R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0001_0011,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        233, "stc VBR,R{n:d}",
        0b1111_0000_1111_1111,
        0b0000_0000_0010_0010,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        234, "stc.l VBR,@-R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0010_0011,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        241, "stc SGR,R{n:d}",
        0b1111_0000_1111_1111,
        0b0000_0000_0011_1010,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        242, "stc.l SGR,@-R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0011_0010,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        243, "stc SSR,R{n:d}",
        0b1111_0000_1111_1111,
        0b0000_0000_0011_0010,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        244, "stc.l SSR,@-R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0011_0011,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        245, "stc SPC,R{n:d}",
        0b1111_0000_1111_1111,
        0b0000_0000_0100_0010,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        246, "stc.l SPC,@-R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0100_0011,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        247, "stc DBR,R{n:d}",
        0b1111_0000_1111_1111,
        0b0000_0000_1111_1010,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        248, "stc.l DBR,@-R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_1111_0010,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        249, "stc R{m:d}_BANK,R{n:d}",
        0b1111_0000_1000_1111,
        0b0000_0000_1000_0010,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_0111_0000,  # m
        }
    ), (
        250, "stc.l R{m:d}_BANK,@-R{n:d}",
        0b1111_0000_1000_1111,
        0b0100_0000_1000_0011,
        {
            'n': 0b0000_1111_0000_0000,  # n
            'm': 0b0000_0000_0111_0000,  # m
        }
    ), (
        251, "sts MACH,R{n:d}",
        0b1111_0000_1111_1111,
        0b0000_0000_0000_1010,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        252, "sts.l MACH,@-R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0000_0010,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        253, "sts MACL,R{n:d}",
        0b1111_0000_1111_1111,
        0b0000_0000_0001_1010,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        254, "sts.l MACL,@-R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0001_0010,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        255, "sts PR,R{n:d}",
        0b1111_0000_1111_1111,
        0b0000_0000_0010_1010,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        256, "sts.l PR,@-R{n:d}",
        0b1111_0000_1111_1111,
        0b0100_0000_0010_0010,
        {
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        270, "trapa #h'{i:04x}",
        0b1111_1111_0000_0000,
        0b1100_0011_0000_0000,
        {
            'i': 0b0000_0000_1111_1111,  # i
        }
    ),
]

abstract_table = {
    0: "R{m:d} ->; R{n:d}",
    1: "h'{i:04x} ->; sign extension ->; R{n:d}",
    4: "(R{d:d}*4) + (PC &; 0xFFFFFFFC) + 4 ->; R0",
    5: "(R{d:d}*2 + PC + 4) ->; sign extension ->; R{n:d}",
    6: "(R{d:d}*4 + (PC &; 0xFFFFFFFC) + 4) ->; sign extension ->; R{n:d}",
    7: "(R{m:d}) ->; sign extension ->; R{n:d}",
    8: "(R{m:d}) ->; sign extension ->; R{n:d}",
    9: "(R{m:d}) ->; R{n:d}",
    10: "R{m:d} ->; (R{n:d})",
    11: "R{m:d} ->; (R{n:d})",
    12: "R{m:d} ->; (R{n:d})",
    13: "(R{m:d}) ->; sign extension ->; R{n:d}, R{m:d}+1 ->; R{m:d}",
    14: "(R{m:d}) ->; sign extension ->; R{n:d}, R{m:d}+2 ->; R{m:d}",
    15: "(R{m:d}) ->; R{n:d}, R{m:d}+4 ->; R{m:d}",
    16: "R{n:d}-1 ->; R{n:d}, R{m:d} ->; (R{n:d})",
    17: "R{n:d}-2 ->; R{n:d}, R{m:d} ->; (R{n:d})",
    18: "R{n:d}-4 ->; R{n:d}, R{m:d} ->; (R{n:d})",
    25: "(R{d:d} + R{m:d}) ->; sign extension ->; R0",
    28: "(R{d:d}*2 + R{m:d}) ->; sign extension ->; R0",
    31: "(R{d:d}*4 + R{m:d}) ->; R{n:d}",
    33: "R0 ->; (R{d:d} + R{n:d})",
    35: "R0 ->; (R{d:d}*2 + R{n:d})",
    37: "R{m:d} ->; (R{d:d}*4 + R{n:d})",
    39: "(R0 + R{m:d}) ->; sign extension ->; R{n:d}",
    40: "(R0 + R{m:d}) ->; sign extension ->; R{n:d}",
    41: "(R0 + R{m:d}) ->; R{n:d}",
    42: "R{m:d} ->; (R0 + R{n:d})",
    43: "R{m:d} ->; (R0 + R{n:d})",
    44: "R{m:d} ->; (R0 + R{n:d})",
    45: "(R{d:d} + GBR) ->; sign extension ->; R0",
    46: "(R{d:d}*2 + GBR) ->; sign extension ->; R0",
    47: "(R{d:d}*4 + GBR) ->; R0",
    48: "R0 ->; (R{d:d} + GBR)",
    49: "R0 ->; (R{d:d}*2 + GBR)",
    50: "R0 ->; (R{d:d}*4 + GBR)",
    60: "T ->; R{n:d}",
    62: "R{m:d} ->; swap lower 2 bytes ->; R{n:d}",
    63: "R{m:d} ->; swap upper/lower words ->; R{n:d}",
    64: "R{m:d}:R{n:d} middle 32 bits ->; R{n:d}",
    79: "R{n:d} + R{m:d} ->; R{n:d}",
    80: "R{n:d} + (sign extension)h'{i:04x}",
    81: "R{n:d} + R{m:d} + T ->; R{n:d}, carry ->; T",
    82: "R{n:d} + R{m:d} ->; R{n:d}, overflow ->; T",
    83: "If R0 = (sign extension)h'{i:04x}: 1 ->; T Else: 0 ->; T",
    84: "If R{n:d} = R{m:d}: 1 ->; T Else: 0 ->; T",
    85: "If R{n:d} >;= R{m:d} (unsigned): 1 ->; T Else: 0 ->; T",
    86: "If R{n:d} >;= R{m:d} (signed): 1 ->; T Else: 0 ->; T",
    87: "If R{n:d} >; R{m:d} (unsigned): 1 ->; T Else: 0 ->; T",
    88: "If R{n:d} >; R{m:d} (signed): 1 ->; T Else: 0 ->; T",
    89: "If R{n:d} >; 0 (signed): 1 ->; T Else: 0 ->; T",
    90: "If R{n:d} >;= 0 (signed): 1 ->; T Else: 0 ->; T",
    91: "If R{n:d} and R{m:d} have an equal byte: 1 ->; T Else: 0 ->; T",
    96: "MSB of R{n:d} ->; Q, MSB of R{m:d} ->; M, M ^ Q ->; T",
    97: "0 ->; M, 0 ->; Q, 0 ->; T",
    98: "1-step division (R{n:d} / R{m:d})",
    101: "Signed, R{n:d} * R{m:d} ->; MACH:MACL 32 * 32 ->; 64 bits",
    102: "Unsigned, R{n:d} * R{m:d} ->; MACH:MACL 32 * 32 ->; 64 bits",
    103: "R{n:d}-1 ->; R{n:d} If R{n:d} = 0: 1 ->; T Else: 0 ->; T",
    104: "R{m:d} sign-extended from byte ->; R{n:d}",
    105: "R{m:d} sign-extended from word ->; R{n:d}",
    106: "R{m:d} zero-extended from byte ->; R{n:d}",
    107: "R{m:d} zero-extended from word ->; R{n:d}",
    108: "Signed, (R{n:d}) * (R{m:d}) + MAC ->; MAC 32 * 32 + 64 ->; 64 bits",
    109: "Signed, (R{n:d}) * (R{m:d}) + MAC ->; MAC SH1: 16 * 16 + 42 ->; 42 bits Other: 16 * 16 + 64 ->; 64 bits",
    110: "R{n:d} * R{m:d} ->; MACL 32 * 32 ->; 32 bits",
    112: "Signed, R{n:d} * R{m:d} ->; MACL 16 * 16 ->; 32 bits",
    113: "Unsigned, R{n:d} * R{m:d} ->; MACL 16 * 16 ->; 32 bits",
    114: "0 - R{m:d} ->; R{n:d}",
    115: "0 - R{m:d} - T ->; R{n:d}, borrow ->; T",
    116: "R{n:d} - R{m:d} ->; R{n:d}",
    117: "R{n:d} - R{m:d} - T ->; R{n:d}, borrow ->; T",
    118: "R{n:d} - R{m:d} ->; R{n:d}, underflow ->; T",
    119: "R{n:d} &; R{m:d} ->; R{n:d}",
    120: "R0 &; (zero extend)h'{i:04x} ->; R0",
    121: "(R0 + GBR) &; (zero extend)h'{i:04x} ->; (R0 + GBR)",
    122: "~R{m:d} ->; R{n:d}",
    123: "R{n:d} | R{m:d} ->; R{n:d}",
    124: "R0 | (zero extend)h'{i:04x} ->; R0",
    125: "(R0 + GBR) | (zero extend)h'{i:04x} ->; (R0 + GBR)",
    126: "If (R{n:d}) = 0: 1 ->; T Else: 0 ->; T 1 ->; MSB of (R{n:d})",
    127: "If R{n:d} &; R{m:d} = 0: 1 ->; T Else: 0 ->; T",
    128: "If R0 &; (zero extend)h'{i:04x} = 0: 1 ->; T Else: 0 ->; T",
    129: "If (R0 + GBR) &; (zero extend)h'{i:04x} = 0: 1 ->; T Else 0: ->; T",
    130: "R{n:d} ^ R{m:d} ->; R{n:d}",
    131: "R0 ^ (zero extend)h'{i:04x} ->; R0",
    132: "(R0 + GBR) ^ (zero extend)h'{i:04x} ->; (R0 + GBR)",
    133: "T <;<; R{n:d} <;<; T",
    134: "T >;>; R{n:d} >;>; T",
    135: "T <;<; R{n:d} <;<; MSB",
    136: "LSB >;>; R{n:d} >;>; T",
    137: "If R{m:d} >;= 0: R{n:d} <;<; R{m:d} ->; R{n:d} If R{m:d} <; 0: R{n:d} >;>; |R{m:d}| ->; [MSB ->; R{n:d}]",
    138: "T <;<; R{n:d} <;<; 0",
    139: "MSB >;>; R{n:d} >;>; T",
    140: "If R{m:d} >;= 0: R{n:d} <;<; R{m:d} ->; R{n:d} If R{m:d} <; 0: R{n:d} >;>; |R{m:d}| ->; [0 ->; R{n:d}]",
    141: "T <;<; R{n:d} <;<; 0",
    142: "R{n:d} <;<; 2 ->; R{n:d}",
    143: "R{n:d} <;<; 8 ->; R{n:d}",
    144: "R{n:d} <;<; 16 ->; R{n:d}",
    145: "0 >;>; R{n:d} >;>; T",
    146: "R{n:d} >;>; 2 ->; [0 ->; R{n:d}]",
    147: "R{n:d} >;>; 8 ->; [0 ->; R{n:d}]",
    148: "R{n:d} >;>; 16 ->; [0 ->; R{n:d}]",
    149: "If T = 0: R{d:d}*2 + PC + 4 ->; PC Else: nop",
    150: "If T = 0: R{d:d}*2 + PC + 4 ->; PC Else: nop (Delayed branch)",
    151: "If T = 1: R{d:d}*2 + PC + 4 ->; PC Else: nop",
    152: "If T = 1: R{d:d}*2 + PC + 4 ->; PC Else: nop (Delayed branch)",
    153: "R{d:d}*2 + PC + 4 ->; PC (Delayed branch)",
    154: "R{m:d} + PC + 4 ->; PC (Delayed branch)",
    155: "PC + 4 ->; PR, R{d:d}*2 + PC + 4 ->; PC (Delayed branch)",
    156: "PC + 4 ->; PR, R{m:d} + PC + 4 ->; PC (Delayed branch)",
    157: "R{m:d} ->; PC (Delayed branch)",
    158: "PC + 4 ->; PR, R{m:d} ->; PC (Delayed branch)",
    161: "PR ->; PC Delayed branch",
    164: "0 ->; MACH, 0 ->; MACL",
    165: "0 ->; S",
    166: "0 ->; T",
    169: "R{m:d} ->; SR",
    170: "(R{m:d}) ->; SR, R{m:d}+4 ->; R{m:d}",
    172: "R{m:d} ->; GBR",
    173: "(R{m:d}) ->; GBR, R{m:d}+4 ->; R{m:d}",
    174: "R{m:d} ->; VBR",
    175: "(R{m:d}) ->; VBR, R{m:d}+4 ->; R{m:d}",
    184: "R{m:d} ->; SSR",
    185: "(R{m:d}) ->; SSR, R{m:d}+4 ->; R{m:d}",
    186: "R{m:d} ->; SPC",
    187: "(R{m:d}) ->; SPC, R{m:d}+4 ->; R{m:d}",
    188: "R{m:d} ->; DBR",
    189: "(R{m:d}) ->; DBR, R{m:d}+4 ->; R{m:d}",
    190: "R{m:d} ->; R{n:d}_BANK (n = 0-7)",
    191: "(R{m:d}) ->; R{n:d}_BANK, R{m:d}+4 ->; R{m:d}",
    194: "R{m:d} ->; MACH",
    195: "(R{m:d}) ->; MACH, R{m:d}+4 ->; R{m:d}",
    196: "R{m:d} ->; MACL",
    197: "(R{m:d}) ->; MACL, R{m:d}+4 ->; R{m:d}",
    198: "R{m:d} ->; PR",
    199: "(R{m:d}) ->; PR, R{m:d}+4 ->; R{m:d}",
    212: "PTEH/PTEL ->; TLB",
    213: "R0 ->; (R{n:d}) (without fetching cache block)",
    214: "No operation",
    215: "Invalidate operand cache block",
    216: "Write back and invalidate operand cache block",
    217: "Write back operand cache block",
    218: "(R{n:d}) ->; operand cache",
    221: "Delayed branch SH1*,SH2*: stack area ->; PC/SR SH3*,SH4*: SSR/SPC ->; SR/PC",
    224: "1 ->; S",
    225: "1 ->; T",
    226: "Sleep or standby",
    228: "SR ->; R{n:d}",
    229: "R{n:d}-4 ->; R{n:d}, SR ->; (R{n:d})",
    231: "GBR ->; R{n:d}",
    232: "R{n:d}-4 ->; R{n:d}, GBR ->; (R{n:d})",
    233: "VBR ->; R{n:d}",
    234: "R{n:d}-4 ->; R{n:d}, VBR ->; (R{n:d})",
    241: "SGR ->; R{n:d}",
    242: "R{n:d}-4 ->; R{n:d}, SGR ->; (R{n:d})",
    243: "SSR ->; R{n:d}",
    244: "R{n:d}-4 ->; R{n:d}, SSR ->; (R{n:d})",
    245: "SPC ->; R{n:d}",
    246: "R{n:d}-4 ->; R{n:d}, SPC ->; (R{n:d})",
    247: "DBR ->; R{n:d}",
    248: "R{n:d}-4 ->; R{n:d}, DBR ->; (R{n:d})",
    249: "R{m:d}_BANK ->; R{n:d} (m = 0-7)",
    250: "R{n:d}-4 ->; R{n:d}, R{m:d}_BANK ->; (R{n:d}) (m = 0-7)",
    251: "MACH ->; R{n:d}",
    252: "R{n:d}-4 ->; R{n:d}, MACH ->; (R{n:d})",
    253: "MACL ->; R{n:d}",
    254: "R{n:d}-4 ->; R{n:d}, MACL ->; (R{n:d})",
    255: "PR ->; R{n:d}",
    256: "R{n:d}-4 ->; R{n:d}, PR ->; (R{n:d})",
    270: "SH1*,SH2*: PC/SR ->; stack area, (h'{i:04x}*4 + VBR) ->; PC SH3*,SH4*: PC/SR ->; SPC/SSR, h'{i:04x}*4 ->; TRA, 0x160 ->; EXPEVT, VBR + 0x0100 ->; PC",

}
