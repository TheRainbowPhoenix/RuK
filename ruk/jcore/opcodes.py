"""
JCore OPCodes

Base struct:
mask (binary)
name (str)
type (str)
"""
from typing import List, Tuple, Dict

opcodes_table: List[Tuple[int, str, int, int, Dict[str, int]]] = [
    # (id, name:str, mask:int, code:int, args: dict{name:str, mask:int}
    (
        0, "mov r{m:d}, r{n:d}",
        0b1111_0000_0000_1111,
        0b0110_0000_0000_0011,
        {
            'm': 0b0000_0000_1111_0000,  # m
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        1, "mov #h'{i:04x} r{n:d}",
        0b1111_0000_0000_0000,
        0b1110_0000_0000_0000,
        {
            'i': 0b0000_0000_1111_1111,  # i
            'n': 0b0000_1111_0000_0000,  # n
        }
    ),

    # TODO: all MOV

    (
        12, "mov.l r{m:d}, @r{n:d}",
        0b1111_0000_0000_1111,
        0b0010_0000_0000_0010,
        {
            'm': 0b0000_0000_1111_0000,  # m
            'n': 0b0000_1111_0000_0000,  # n
        }
    ),

    (
        16, "mov.b r{m:d}, @-r{n:d}",
        0b1111_0000_0000_1111,
        0b1110_0000_0000_0100,
        {
            'm': 0b0000_0000_1111_0000,  # m
            'n': 0b0000_1111_0000_0000,  # n
        }
    ),
    (
        37, "mov.l	r{m:d},@({d:d},r{n:d})",
        0b1111_0000_0000_0000,
        0b0001_0000_0000_0000,
        {
            'm': 0b0000_0000_1111_0000,  # m
            'd': 0b0000_0000_0000_1111,  # d
            'n': 0b0000_1111_0000_0000,  # n
        }
    ),

    (
        79, "add r{m:d}, r{n:d}",
        0b1111_0000_0000_1111,
        0b0011_0000_0000_1100,
        {
            'm': 0b0000_0000_1111_0000,  # m
            'n': 0b0000_1111_0000_0000,  # n
        }
    ), (
        80, "add #h'{i:04x}, r{n:d}",
        0b1111_0000_0000_0000,
        0b0111_0000_0000_0000,
        {
            'i': 0b0000_0000_1111_1111,  # i
            'n': 0b0000_1111_0000_0000,  # n
        }
    ),

    (
        88, "cmp/gt r{m:d}, r{n:d}",
        0b1111_0000_0000_1111,
        0b0011_0000_0000_0111,
        {
            'm': 0b0000_0000_1111_0000,  # m
            'n': 0b0000_1111_0000_0000,  # n
        }
    ),

    (
        149, "bf 0x{i:04x}",
        0b1111_1111_0000_0000,
        0b1000_1011_0000_0000,
        {
            'i': 0b0000_0000_1111_1111,  # i
        }
    ),
    (
        153, "bra 0x{i:06x}",
        0b1111_0000_0000_0000,
        0b1010_0000_0000_0000,
        {
            'i': 0b0000_1111_1111_1111,  # i
        }
    ),
    (
        161, "rts",
        0b1111_1111_1111_1111,
        0b0000_0000_0000_1011,
        {}
    ),


]

abstract_table = {
    0: "R{0:d} -> R{1:d}",
    1: "{0:02X} -> R{1:d}",
    12: "R{1:d} -> (R{0:d})",
    16: "R{0:d}-1 -> R{0:d}, R{1:d} -> (R{0:d})",
    37: "R{0:d} -> ({1:d}*4 R{2:d})",
    79: "R{1:d} + R{0:d} -> R{1:d}",
    80: "R{1:d} += {0:02X}",
    88: "1 -> T If R{1:d} > R{0:d} (signed) Else 0 -> T",
    149: "{0}*2 + PC + 4 -> PC If T = 0 Else nop",
    153: "{0}*2 + PC + 4 -> PC",
    161: "PR -> PC (Delayed branch)",
}
